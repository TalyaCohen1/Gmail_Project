const mongoose = require('mongoose');

// Define the User Schema
const userSchema = new mongoose.Schema({
    fullName: {
        type: String,
        required: true,
        trim: true
    },
    // The original app used 'id' for users, but MongoDB uses '_id' by default.
    // If you need a separate `id` field for compatibility with existing logic, you can keep it.
    // Otherwise, you can remove this `id` field and rely on Mongoose's `_id`.
    // For now, let's keep it to minimize changes elsewhere, but ensure it's unique if used as a primary identifier.
    // A better approach would be to refactor controllers to use `_id` directly.
    // For simplicity, we'll auto-generate a unique `id` if not provided, or ensure it's unique if manually set.
    // For this example, let's just assume `_id` will be sufficient unless specifically told otherwise by the previous system's structure.
    // Let's remove `id` from the schema for now and use `_id` generated by Mongoose.
    // If your client-side or other controllers heavily rely on a numeric `id`, we'll need a different strategy (e.g., a custom auto-incrementing plugin).
    // For typical Mongoose usage, you'd just use `_id`.

    emailAddress: {
        type: String,
        required: true,
        unique: true, // Ensures email addresses are unique in the database
        trim: true 
    },
    birthDate: {
        type: String, // Storing as String for YYYY-MM-DD format based on validator
        required: true
    },
    gender: {
        type: String,
        required: true,
        enum: ['male', 'female'] // Restrict to these two values
    },
    password: {
        type: String,
        required: true
    },
    profileImage: {
        type: String,
        default: '/uploads/default-profile.png' // Default image
    },
    // You might want to add timestamps
}, { timestamps: true }); // Adds createdAt and updatedAt fields automatically

// Create the Mongoose Model
const User = mongoose.model('User', userSchema);

/**
 * Creates a new user and adds it to the database.
 * @param {string} fullName - The user's full name.
 * @param {string} emailAddress - The user's email address.
 * @param {string} birthDate - Date of birth (YYYY-MM-DD).
 * @param {string} gender - Gender ("male" or "female").
 * @param {string} password - The user's password.
 * @param {string} [profileImage] - Optional profile image path.
 * @returns {Promise<Object>} A promise that resolves to the newly created user object.
 */
const createUser = async (fullName, emailAddress, birthDate, gender, password, profileImage) => {
    const newUser = new User({
        fullName,
        emailAddress,
        birthDate,
        gender,
        password,
        profileImage
    });
    return await newUser.save();
};

/**
 * Finds a user by their unique Mongoose _id.
 * @param {string} id - The user's MongoDB _id.
 * @returns {Promise<Object|null>} A promise that resolves to the user object, or null if not found.
 */
const findById = async (id) => {
    // Mongoose's findById uses the document's _id
    return await User.findById(id);
};

/**
 * Finds a user by their email address.
 * @param {string} emailAddress - The email to search for.
 * @returns {Promise<Object|null>} A promise that resolves to the user object, or null if not found.
 */
const findByEmail = async (emailAddress) => {
    return await User.findOne({ emailAddress: emailAddress });
};

/**
 * Retrieves all users.
 * @returns {Promise<Array<Object>>} A promise that resolves to an array of all user objects.
 */
const getAllUsers = async () => {
    return await User.find({});
};

/**
 * Updates a user's information by ID.
 * @param {string} id - The ID of the user to update.
 * @param {Object} updates - An object containing fields to update (e.g., { fullName: 'New Name' }).
 * @returns {Promise<Object|null>} A promise that resolves to the updated user object, or null if not found.
 */
const updateUser = async (id, updates) => {
    // findByIdAndUpdate is a convenient Mongoose method
    // { new: true } returns the document after update
    // { runValidators: true } ensures schema validators run on updates
    return await User.findByIdAndUpdate(id, updates, { new: true, runValidators: true });
};

/**
 * Deletes a user by their ID.
 * @param {string} id - The ID of the user to delete.
 * @returns {Promise<Object|null>} A promise that resolves to the deleted user object, or null if not found.
 */
const deleteUser = async (id) => {
    return await User.findByIdAndDelete(id);
};


module.exports = {
    createUser,
    findById,
    findByEmail,
    getAllUsers,
    updateUser, // Exporting the new update function
    deleteUser  // Exporting the new delete function
};